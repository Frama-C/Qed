(* ------------------------------------------------------------------------ *)
(* ---  Conical Spaces                                                  --- *)
(* ------------------------------------------------------------------------ *)

(** Space of elements greater than some generator.

    Given a partial order [<], the cone of [a] is the set [a^] of elements [b] 
    such that [a<b].

    Define the cone generated by the set [A] to be the union of [a^] for [a] in [A].
    A generator of [A^] is any [B] such that [B^=A^].

    Then we can define a base of [A] to be a minimal generator [B] of
    [A^].  This module provide algorithms to compute efficiently a
    base of [(A+B)^] from any bases of [A^] and [B^].
*)

type 'a merge = 'a -> 'a -> 'a option
  
(** A merge function takes [a] and [b] then returns [c] such that [c^] is some
    minimal superset of [a^] and [b^].
    
    The [merge] operation induces an order [<] such that [a<b] when
    [merge a b = Some a].  *)

val base : order:'a merge -> 'a list -> 'a list
  (** [base A] is a base for [A^] *)
  
val add : order:'a merge -> 'a -> 'a list -> 'a list
  (** [add x A] returns a generator for [(x+A)^]. 
      Moreover, whenever [A] is a base of [A^], [add x A] is a base of [(x+A)^]. 
      
      Linear complexity in the cardinal of [A] 
      (measured in number of calls to [S.merge]).
  *)
  
val merge : order:'a merge -> 'a list -> 'a list -> 'a list
  (** [merge A B] returns a generator for [(A+B)^].
      Moreover, whenever [A] is a base of [A^] and [B] is a base of [B^], 
      [merge A B] is a base of [(A+B)^]. 
      
      Assume [n] is the minimum cardinal and [m] the maximal cardinal of [A] and [B], 
      complexity is quadratic in [n] and linear in [m]
      (measured in number of calls to [S.merge]).
  *)
  
val map : order:'a merge -> ('b -> 'a) -> 'b list -> 'a list
  (** [map f xs] returns a base of [f(x)^]. *)
